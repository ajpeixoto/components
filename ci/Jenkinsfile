def nexusCredentials = usernamePassword(
	credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

def gitCredentials = usernamePassword(
	credentialsId: 'github-credentials',
    usernameVariable: 'GITHUB_LOGIN',
    passwordVariable: 'GITHUB_TOKEN')

def dockerCredentials = usernamePassword(
	credentialsId: 'docker-registry-credentials',
    passwordVariable: 'DOCKER_PASSWORD',
    usernameVariable: 'DOCKER_LOGIN')

def artifactoryCredentials = usernamePassword(
    credentialsId: 'artifactory-datapwn-credentials',
    passwordVariable: 'ARTIFACTORY_PASSWORD',
    usernameVariable: 'ARTIFACTORY_LOGIN')

def sfCredentials = usernamePassword(
    credentialsId: 'tcompv0-salesforce-credentials',
    usernameVariable: 'SALESFORCE_USERNAME',
    passwordVariable: 'SALESFORCE_PASSWORD')

def sfSecurityToken = string(
    credentialsId: 'tcompv0-salesforce-account-key',
    variable: 'SALESFORCE_SECURITY_TOKEN')

def sfExpiredCredentials = usernamePassword(
    credentialsId: 'expired-salesforce-credentials',
    usernameVariable: 'EXPIRED_SALESFORCE_USERNAME',
    passwordVariable: 'EXPIRED_SALESFORCE_PASSWORD')

def sfExpiredSecurityToken = string(
    credentialsId: 'expired-salesforce-account-key',
    variable: 'EXPIRED_SALESFORCE_SECURITY_TOKEN')

final boolean isOnMasterOrMaintenanceBranch = (env.BRANCH_NAME == "master" || env.BRANCH_NAME.startsWith("maintenance/"))
String repository = 'components'

pipeline {
  agent {
    kubernetes {
      yamlFile 'ci/jenkins_pod.yml'
      defaultContainer 'main'
    }
  }

  environment {
    MAVEN_OPTS = "-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss -Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/"
    ARTIFACTORY_REGISTRY = "artifactory.datapwn.com"
  }

  options {
    timeout(time: 120, unit: 'MINUTES')
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  parameters {
    choice(name: 'Action',
            choices: ['STANDARD', 'CHANGELOG'],
            description: '''
            Kind of running : 
            STANDARD (default),[ Compile | Test] for all branch build, and [ Nexus deployment ]for master and maintenance branch
            CHANGELOG for creating the release changelog. You have to call it after the release is done.
            (Other actions are under development)'''
    )
    booleanParam(
            name: 'DRAFT_CHANGELOG',
            defaultValue: true,
            description: '''
            Create a draft release changelog. User will need to approve it on github.
            Only used on release action''')
  }

  stages {
    stage('Prepare build') {
      steps {
        ///////////////////////////////////////////
        // asdf install
        ///////////////////////////////////////////
        script {
          println "asdf install the content of repository .tool-versions"
          sh 'bash ci/asdf_install.sh'
        }
        ///////////////////////////////////////////
        // Git login
        ///////////////////////////////////////////
        script {
          echo 'Git login'
          withCredentials([gitCredentials]) {
            sh """
              bash ci/git-login.sh \
                  "\${GITHUB_LOGIN}" \
                  "\${GITHUB_TOKEN}"
            """
          }
        }
      }
    }

    stage('Compile | Test') {
      when {
        expression { params.Action == 'STANDARD' }
      }
      steps {
        withCredentials([gitCredentials,
                         nexusCredentials,
                         dockerCredentials,
                         artifactoryCredentials,
                         sfCredentials,
                         sfSecurityToken,
                         sfExpiredCredentials,
                         sfExpiredSecurityToken]) {
          sh """\
            #!/usr/bin/env bash 
            set -xe
            docker version
            echo $ARTIFACTORY_PASSWORD | docker login $ARTIFACTORY_REGISTRY -u $ARTIFACTORY_LOGIN --password-stdin

            mvn clean install -s ci/settings.xml\
              --update-snapshots \
              --batch-mode \
              --show-version \
              -Dsalesforce.user=${SALESFORCE_USERNAME} \
              -Dsalesforce.password=${SALESFORCE_PASSWORD} \
              -Dsalesforce.key=${SALESFORCE_SECURITY_TOKEN} \
              -Dsalesforce.user.expired=${EXPIRED_SALESFORCE_USERNAME} \
              -Dsalesforce.password.expired=${EXPIRED_SALESFORCE_PASSWORD} \
              -Dsalesforce.key.expired=${EXPIRED_SALESFORCE_SECURITY_TOKEN}
          """.stripIndent()
        }
      }
    }

    stage('Nexus Deployment') {
      when {
        expression { params.Action != 'CHANGELOG' }
        anyOf {
          expression { env.BRANCH_NAME == "master" }
          expression { env.BRANCH_NAME.startsWith('maintenance/') }
        }
      }
      steps {
        withCredentials([gitCredentials, nexusCredentials, dockerCredentials, artifactoryCredentials]) {
          sh """\
            #!/usr/bin/env bash 
            set -xe
            docker version
            echo $ARTIFACTORY_PASSWORD | docker login $ARTIFACTORY_REGISTRY -u $ARTIFACTORY_LOGIN --password-stdin
            mvn clean deploy -B -U -V -s ci/settings.xml -DskipTests -DskipITs
          """.stripIndent()
        }
      }
    }

    stage('Changelog') {
      when {
        expression { params.Action == 'CHANGELOG' }
      }
      steps {
        withCredentials([gitCredentials]) {
          script {
            final def pom = readMavenPom file: 'pom.xml'
            String currentVersion = pom.version.split('-')[0]
            String releaseVersion = currentVersion
            String previousVersion = evaluatePreviousVersion(releaseVersion)
            sh """
              bash ci/changelog.sh \
                  '${repository}' \
                  '${previousVersion}' \
                  '${releaseVersion}' \
                  '${params.DRAFT_CHANGELOG}' \
                  "\${BRANCH_NAME}" \
                  "\${GITHUB_LOGIN}" \
                  "\${GITHUB_TOKEN}"
              """
          }
        }
      }
    }
  }

  post {
    success {
      script {
        //Only post results to Slack for Master and Maintenance branches
        if (isOnMasterOrMaintenanceBranch) {
          slackSend(
            color: '#00FF00',
            message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
            channel: "${env.SLACK_CI_CHANNEL}")
        }
      }
    }
    failure {
      script {
        //Only post results to Slack for Master and Maintenance branches
        if (isOnMasterOrMaintenanceBranch) {
          //if previous build was a success, ping channel in the Slack message
          if ("SUCCESS".equals(currentBuild.previousBuild.result)) {
            slackSend(
              color: '#FF0000',
              message: "@here : NEW FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
              channel: "${env.SLACK_CI_CHANNEL}")
          } else {
            //else send notification without pinging channel
            slackSend(
              color: '#FF0000',
              message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})",
              channel: "${env.SLACK_CI_CHANNEL}")
          }
        }
      }
    }
  }
}

/**
 * Evaluate previous SemVer version
 * @param version current version
 * @return previous version
 */
private static String evaluatePreviousVersion(String version) {
  def components = version.split('\\.')

  int major = components[0] as int
  int minor = components[1] as int
  int patch = components[2] as int

  if (patch > 0) {
    patch--
  } else {
    patch = 0
    if (minor > 0) {
      minor--
    } else {
      minor = 0
      if (major > 0) {
        major--
      } else {
        // Invalid state: Cannot calculate previous version if major version is already 0 or less
        throw new IllegalArgumentException("Invalid version: $version") as java.lang.Throwable
      }
    }
  }

  return "${major}.${minor}.${patch}" as String
}
